/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace GreenFi {
  export type CryptoLoanStruct = {
    id: string;
    title: string;
    description: string;
    amountETH: BigNumberish;
    collateral: string;
    interestRate: BigNumberish;
    termMonths: BigNumberish;
    yieldScore: BigNumberish;
    relatedLandId: string;
    owner: AddressLike;
    isActive: boolean;
  };

  export type CryptoLoanStructOutput = [
    id: string,
    title: string,
    description: string,
    amountETH: bigint,
    collateral: string,
    interestRate: bigint,
    termMonths: bigint,
    yieldScore: bigint,
    relatedLandId: string,
    owner: string,
    isActive: boolean
  ] & {
    id: string;
    title: string;
    description: string;
    amountETH: bigint;
    collateral: string;
    interestRate: bigint;
    termMonths: bigint;
    yieldScore: bigint;
    relatedLandId: string;
    owner: string;
    isActive: boolean;
  };

  export type LandLoanStruct = {
    id: string;
    title: string;
    description: string;
    size: BigNumberish;
    collateralToken: string;
    collateralAmount: BigNumberish;
    termMonths: BigNumberish;
    interestRate: BigNumberish;
    yieldScore: BigNumberish;
    owner: AddressLike;
    isLent: boolean;
    borrower: AddressLike;
  };

  export type LandLoanStructOutput = [
    id: string,
    title: string,
    description: string,
    size: bigint,
    collateralToken: string,
    collateralAmount: bigint,
    termMonths: bigint,
    interestRate: bigint,
    yieldScore: bigint,
    owner: string,
    isLent: boolean,
    borrower: string
  ] & {
    id: string;
    title: string;
    description: string;
    size: bigint;
    collateralToken: string;
    collateralAmount: bigint;
    termMonths: bigint;
    interestRate: bigint;
    yieldScore: bigint;
    owner: string;
    isLent: boolean;
    borrower: string;
  };
}

export interface GreenFiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "cryptoLoanIds"
      | "cryptoLoans"
      | "fund"
      | "getCryptoLoans"
      | "getLandLoans"
      | "getStakedBalance"
      | "initialize"
      | "landLoanIds"
      | "landLoans"
      | "lend"
      | "listCryptoLoan"
      | "listLand"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "repay"
      | "retrieve"
      | "stake"
      | "stakedBalances"
      | "totalStaked"
      | "transferOwnership"
      | "unlist"
      | "unlistCryptoLoan"
      | "unstake"
      | "upgradeToAndCall"
      | "weedlToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CryptoLoanFunded"
      | "CryptoLoanListed"
      | "CryptoLoanUnlisted"
      | "Initialized"
      | "LandLent"
      | "LandListed"
      | "LandRepaid"
      | "LandRetrieved"
      | "LandUnlisted"
      | "OwnershipTransferred"
      | "Staked"
      | "Unstaked"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cryptoLoanIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cryptoLoans", values: [string]): string;
  encodeFunctionData(functionFragment: "fund", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCryptoLoans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLandLoans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "landLoanIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "landLoans", values: [string]): string;
  encodeFunctionData(functionFragment: "lend", values: [string]): string;
  encodeFunctionData(
    functionFragment: "listCryptoLoan",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listLand",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [string]): string;
  encodeFunctionData(functionFragment: "retrieve", values: [string]): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakedBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unlist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unlistCryptoLoan",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "weedlToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cryptoLoanIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cryptoLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCryptoLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLandLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "landLoanIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "landLoans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listCryptoLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listLand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retrieve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlistCryptoLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weedlToken", data: BytesLike): Result;
}

export namespace CryptoLoanFundedEvent {
  export type InputTuple = [
    id: string,
    funder: AddressLike,
    amountETH: BigNumberish
  ];
  export type OutputTuple = [id: string, funder: string, amountETH: bigint];
  export interface OutputObject {
    id: string;
    funder: string;
    amountETH: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CryptoLoanListedEvent {
  export type InputTuple = [
    id: string,
    owner: AddressLike,
    amountETH: BigNumberish
  ];
  export type OutputTuple = [id: string, owner: string, amountETH: bigint];
  export interface OutputObject {
    id: string;
    owner: string;
    amountETH: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CryptoLoanUnlistedEvent {
  export type InputTuple = [id: string, owner: AddressLike];
  export type OutputTuple = [id: string, owner: string];
  export interface OutputObject {
    id: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LandLentEvent {
  export type InputTuple = [
    id: string,
    borrower: AddressLike,
    collateralAmount: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    borrower: string,
    collateralAmount: bigint
  ];
  export interface OutputObject {
    id: string;
    borrower: string;
    collateralAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LandListedEvent {
  export type InputTuple = [
    id: string,
    owner: AddressLike,
    title: string,
    collateralAmount: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    owner: string,
    title: string,
    collateralAmount: bigint
  ];
  export interface OutputObject {
    id: string;
    owner: string;
    title: string;
    collateralAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LandRepaidEvent {
  export type InputTuple = [id: string, borrower: AddressLike];
  export type OutputTuple = [id: string, borrower: string];
  export interface OutputObject {
    id: string;
    borrower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LandRetrievedEvent {
  export type InputTuple = [id: string, owner: AddressLike];
  export type OutputTuple = [id: string, owner: string];
  export interface OutputObject {
    id: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LandUnlistedEvent {
  export type InputTuple = [id: string, owner: AddressLike];
  export type OutputTuple = [id: string, owner: string];
  export interface OutputObject {
    id: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GreenFi extends BaseContract {
  connect(runner?: ContractRunner | null): GreenFi;
  waitForDeployment(): Promise<this>;

  interface: GreenFiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  cryptoLoanIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  cryptoLoans: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean
      ] & {
        id: string;
        title: string;
        description: string;
        amountETH: bigint;
        collateral: string;
        interestRate: bigint;
        termMonths: bigint;
        yieldScore: bigint;
        relatedLandId: string;
        owner: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  fund: TypedContractMethod<[id: string], [void], "payable">;

  getCryptoLoans: TypedContractMethod<
    [],
    [GreenFi.CryptoLoanStructOutput[]],
    "view"
  >;

  getLandLoans: TypedContractMethod<
    [],
    [GreenFi.LandLoanStructOutput[]],
    "view"
  >;

  getStakedBalance: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_weedlToken: AddressLike],
    [void],
    "nonpayable"
  >;

  landLoanIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  landLoans: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        string
      ] & {
        id: string;
        title: string;
        description: string;
        size: bigint;
        collateralToken: string;
        collateralAmount: bigint;
        termMonths: bigint;
        interestRate: bigint;
        yieldScore: bigint;
        owner: string;
        isLent: boolean;
        borrower: string;
      }
    ],
    "view"
  >;

  lend: TypedContractMethod<[id: string], [void], "payable">;

  listCryptoLoan: TypedContractMethod<
    [
      id: string,
      title: string,
      description: string,
      amountETH: BigNumberish,
      collateral: string,
      termMonths: BigNumberish,
      interestRate: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  listLand: TypedContractMethod<
    [
      id: string,
      title: string,
      description: string,
      size: BigNumberish,
      collateralToken: string,
      collateralAmount: BigNumberish,
      termMonths: BigNumberish,
      interestRate: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repay: TypedContractMethod<[id: string], [void], "payable">;

  retrieve: TypedContractMethod<[id: string], [void], "nonpayable">;

  stake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  stakedBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlist: TypedContractMethod<[id: string], [void], "nonpayable">;

  unlistCryptoLoan: TypedContractMethod<[id: string], [void], "nonpayable">;

  unstake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  weedlToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cryptoLoanIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "cryptoLoans"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        boolean
      ] & {
        id: string;
        title: string;
        description: string;
        amountETH: bigint;
        collateral: string;
        interestRate: bigint;
        termMonths: bigint;
        yieldScore: bigint;
        relatedLandId: string;
        owner: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<[id: string], [void], "payable">;
  getFunction(
    nameOrSignature: "getCryptoLoans"
  ): TypedContractMethod<[], [GreenFi.CryptoLoanStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getLandLoans"
  ): TypedContractMethod<[], [GreenFi.LandLoanStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getStakedBalance"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_weedlToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "landLoanIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "landLoans"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        string
      ] & {
        id: string;
        title: string;
        description: string;
        size: bigint;
        collateralToken: string;
        collateralAmount: bigint;
        termMonths: bigint;
        interestRate: bigint;
        yieldScore: bigint;
        owner: string;
        isLent: boolean;
        borrower: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lend"
  ): TypedContractMethod<[id: string], [void], "payable">;
  getFunction(
    nameOrSignature: "listCryptoLoan"
  ): TypedContractMethod<
    [
      id: string,
      title: string,
      description: string,
      amountETH: BigNumberish,
      collateral: string,
      termMonths: BigNumberish,
      interestRate: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "listLand"
  ): TypedContractMethod<
    [
      id: string,
      title: string,
      description: string,
      size: BigNumberish,
      collateralToken: string,
      collateralAmount: BigNumberish,
      termMonths: BigNumberish,
      interestRate: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<[id: string], [void], "payable">;
  getFunction(
    nameOrSignature: "retrieve"
  ): TypedContractMethod<[id: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakedBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlist"
  ): TypedContractMethod<[id: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlistCryptoLoan"
  ): TypedContractMethod<[id: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "weedlToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CryptoLoanFunded"
  ): TypedContractEvent<
    CryptoLoanFundedEvent.InputTuple,
    CryptoLoanFundedEvent.OutputTuple,
    CryptoLoanFundedEvent.OutputObject
  >;
  getEvent(
    key: "CryptoLoanListed"
  ): TypedContractEvent<
    CryptoLoanListedEvent.InputTuple,
    CryptoLoanListedEvent.OutputTuple,
    CryptoLoanListedEvent.OutputObject
  >;
  getEvent(
    key: "CryptoLoanUnlisted"
  ): TypedContractEvent<
    CryptoLoanUnlistedEvent.InputTuple,
    CryptoLoanUnlistedEvent.OutputTuple,
    CryptoLoanUnlistedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LandLent"
  ): TypedContractEvent<
    LandLentEvent.InputTuple,
    LandLentEvent.OutputTuple,
    LandLentEvent.OutputObject
  >;
  getEvent(
    key: "LandListed"
  ): TypedContractEvent<
    LandListedEvent.InputTuple,
    LandListedEvent.OutputTuple,
    LandListedEvent.OutputObject
  >;
  getEvent(
    key: "LandRepaid"
  ): TypedContractEvent<
    LandRepaidEvent.InputTuple,
    LandRepaidEvent.OutputTuple,
    LandRepaidEvent.OutputObject
  >;
  getEvent(
    key: "LandRetrieved"
  ): TypedContractEvent<
    LandRetrievedEvent.InputTuple,
    LandRetrievedEvent.OutputTuple,
    LandRetrievedEvent.OutputObject
  >;
  getEvent(
    key: "LandUnlisted"
  ): TypedContractEvent<
    LandUnlistedEvent.InputTuple,
    LandUnlistedEvent.OutputTuple,
    LandUnlistedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "CryptoLoanFunded(string,address,uint256)": TypedContractEvent<
      CryptoLoanFundedEvent.InputTuple,
      CryptoLoanFundedEvent.OutputTuple,
      CryptoLoanFundedEvent.OutputObject
    >;
    CryptoLoanFunded: TypedContractEvent<
      CryptoLoanFundedEvent.InputTuple,
      CryptoLoanFundedEvent.OutputTuple,
      CryptoLoanFundedEvent.OutputObject
    >;

    "CryptoLoanListed(string,address,uint256)": TypedContractEvent<
      CryptoLoanListedEvent.InputTuple,
      CryptoLoanListedEvent.OutputTuple,
      CryptoLoanListedEvent.OutputObject
    >;
    CryptoLoanListed: TypedContractEvent<
      CryptoLoanListedEvent.InputTuple,
      CryptoLoanListedEvent.OutputTuple,
      CryptoLoanListedEvent.OutputObject
    >;

    "CryptoLoanUnlisted(string,address)": TypedContractEvent<
      CryptoLoanUnlistedEvent.InputTuple,
      CryptoLoanUnlistedEvent.OutputTuple,
      CryptoLoanUnlistedEvent.OutputObject
    >;
    CryptoLoanUnlisted: TypedContractEvent<
      CryptoLoanUnlistedEvent.InputTuple,
      CryptoLoanUnlistedEvent.OutputTuple,
      CryptoLoanUnlistedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LandLent(string,address,uint256)": TypedContractEvent<
      LandLentEvent.InputTuple,
      LandLentEvent.OutputTuple,
      LandLentEvent.OutputObject
    >;
    LandLent: TypedContractEvent<
      LandLentEvent.InputTuple,
      LandLentEvent.OutputTuple,
      LandLentEvent.OutputObject
    >;

    "LandListed(string,address,string,uint256)": TypedContractEvent<
      LandListedEvent.InputTuple,
      LandListedEvent.OutputTuple,
      LandListedEvent.OutputObject
    >;
    LandListed: TypedContractEvent<
      LandListedEvent.InputTuple,
      LandListedEvent.OutputTuple,
      LandListedEvent.OutputObject
    >;

    "LandRepaid(string,address)": TypedContractEvent<
      LandRepaidEvent.InputTuple,
      LandRepaidEvent.OutputTuple,
      LandRepaidEvent.OutputObject
    >;
    LandRepaid: TypedContractEvent<
      LandRepaidEvent.InputTuple,
      LandRepaidEvent.OutputTuple,
      LandRepaidEvent.OutputObject
    >;

    "LandRetrieved(string,address)": TypedContractEvent<
      LandRetrievedEvent.InputTuple,
      LandRetrievedEvent.OutputTuple,
      LandRetrievedEvent.OutputObject
    >;
    LandRetrieved: TypedContractEvent<
      LandRetrievedEvent.InputTuple,
      LandRetrievedEvent.OutputTuple,
      LandRetrievedEvent.OutputObject
    >;

    "LandUnlisted(string,address)": TypedContractEvent<
      LandUnlistedEvent.InputTuple,
      LandUnlistedEvent.OutputTuple,
      LandUnlistedEvent.OutputObject
    >;
    LandUnlisted: TypedContractEvent<
      LandUnlistedEvent.InputTuple,
      LandUnlistedEvent.OutputTuple,
      LandUnlistedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Staked(address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Unstaked(address,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
